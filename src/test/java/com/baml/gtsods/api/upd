package com.baml.gtsods.api.internal;

import static org.mule.runtime.extension.api.annotation.param.MediaType.ANY;

import org.mule.runtime.extension.api.annotation.Alias;
import org.mule.runtime.extension.api.annotation.Expression;
import org.mule.runtime.extension.api.annotation.error.Throws;
import org.mule.runtime.extension.api.annotation.param.MediaType;
import org.mule.runtime.extension.api.annotation.param.Optional;
import org.mule.runtime.extension.api.annotation.param.Parameter;
import org.mule.runtime.extension.api.annotation.param.display.DisplayName;
import org.mule.runtime.extension.api.annotation.param.display.Example;
import org.mule.runtime.extension.api.annotation.param.display.Summary;
import org.mule.runtime.extension.api.exception.ModuleException;
import org.mule.runtime.api.component.ConfigurationProperties;
import org.mule.runtime.api.meta.ExpressionSupport;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.baml.gtsods.api.internal.exceptions.ODataELKErrorTypeProvider;
import com.baml.gtsods.api.internal.exceptions.ODataELKErrors;

public class ODataELKOperations {

    private final Logger logger = LoggerFactory.getLogger(ODataELKOperations.class);

    @Inject
    private ConfigurationProperties configurationProperties;

    private String getProperty(String name) {
        logger.debug("resolvingProperty: {}", name);
        return configurationProperties.resolveStringProperty(name).orElse(null);
    }

    @MediaType(value = ANY, strict = false)
    @Throws(ODataELKErrorTypeProvider.class)
    @Alias("transform-to-elk-bool")
    public String generateELKDSLQuery(
            @Expression(ExpressionSupport.SUPPORTED) @Example("log_*") @DisplayName("ELK Index Fields") @Summary("Configuration property prefix for validating input fields") @Alias("propPrefix") String propPrefix,

            @Expression(ExpressionSupport.SUPPORTED) @Example("name eq 'Naveen'") @DisplayName("Filter") @Summary("Filter string with logical and binary operators to filter data") @Alias("filter") String filter,

            @Expression(ExpressionSupport.SUPPORTED) @Optional(defaultValue = "*") @Example("field1,field2") @DisplayName("Select") @Summary("Comma separated field names to be shown in response.") @Alias("select") String select,

            @Expression(ExpressionSupport.SUPPORTED) @Optional(defaultValue = "0") @Example("0") @DisplayName("Offset") @Summary("Option to request the number of items in the queried collection that are to be skipped and not included in the result.") @Alias("offset") int offset,

            @Expression(ExpressionSupport.SUPPORTED) @Optional(defaultValue = "500") @Example("500") @DisplayName("Max") @Summary("Option requests the number of items in the queried collection to be included in the result") @Alias("top") int top) {
        try {
            logger.debug("Parsing filter: {}, select: {}, offest: {}, max: {}", filter, select, offset, top);
            JSONObject result = parseOrExpr(new Tokenizer(filter), propPrefix);
            JSONObject finalResult = applyOptions(result, select, top, offset, propPrefix);
            String resultString = finalResult.toString();
            logger.debug("Generated Elasticsearch DSL: {}", resultString);
            return resultString;
        } catch (ModuleException e) {
            throw e;
        } catch (Exception e) {
            throw new ModuleException("An unknown error occurred in ODATA ELK Module",
                    ODataELKErrors.INTERNAL_SERVER_ERROR, e);
        }
    }

    private JSONObject parseOrExpr(Tokenizer tokenizer, String propPrefix) {
        List<JSONObject> orList = new ArrayList<>();
        do {
            orList.add(parseAndExpr(tokenizer, propPrefix));  // Handling AND conditions within OR
        } while (tokenizer.consume("or"));

        if (orList.size() == 1) {
            return orList.get(0);
        }

        JSONObject orQuery = new JSONObject();
        orQuery.put("bool", new JSONObject().put("should", new JSONArray(orList)));
        logger.debug("parseOrExpr: {}", orQuery);
        return orQuery;
    }

    private JSONObject parseAndExpr(Tokenizer tokenizer, String propPrefix) {
        List<JSONObject> andList = new ArrayList<>();
        do {
            parseComparisonExpr(tokenizer, propPrefix, andList);  // Passing andList to handle comparisons
        } while (tokenizer.consume("and"));

        if (andList.size() == 1) {
            return andList.get(0);
        }

        JSONObject andQuery = new JSONObject();
        andQuery.put("bool", new JSONObject().put("must", new JSONArray(andList)));
        return andQuery;
    }

    private void parseComparisonExpr(Tokenizer tokenizer, String propPrefix, List<JSONObject> andList) {
        if (tokenizer.consume("(")) {
            JSONObject expr = parseOrExpr(tokenizer, propPrefix);
            tokenizer.consume(")");
            andList.add(expr);
            return;
        }

        String keyName = tokenizer.next();
        String left = getProperty(propPrefix + "." + keyName);
        if (left == null) {
            throw new ModuleException("Invalid filter field '" + keyName + "'. Please check if it's correct/present in YAML file",
                    ODataELKErrors.BAD_REQUEST);
        }
        String op = tokenizer.next();
        Object right = tokenizer.nextValue();

        // Check if an existing range condition is present for this field
        JSONObject existingCondition = findExistingCondition(andList, left);

        if (op.equals("eq") || op.equals("ne")) {
            // Equality and inequality handling
            JSONObject matchQuery = new JSONObject();
            if (op.equals("eq")) {
                matchQuery.put("match_phrase", new JSONObject().put(left, right));
            } else {
                matchQuery.put("bool", new JSONObject().put("must_not", 
                    new JSONObject().put("match_phrase", new JSONObject().put(left, right))));
            }
            andList.add(matchQuery);
        } else {
            // Handle range conditions
            JSONObject rangeCondition;
            if (existingCondition != null) {
                // Update the existing range condition
                rangeCondition = existingCondition.getJSONObject("range").getJSONObject(left);
            } else {
                // Create a new range condition
                rangeCondition = new JSONObject();
                JSONObject rangeQuery = new JSONObject();
                rangeQuery.put("range", new JSONObject().put(left, rangeCondition));
                andList.add(rangeQuery);
            }
            addRangeCondition(rangeCondition, op, right);
        }

        logger.debug("parseComparisonExpr: {}", andList);
    }

    private JSONObject findExistingCondition(List<JSONObject> andList, String field) {
        for (JSONObject condition : andList) {
            if (condition.has("range") && condition.getJSONObject("range").has(field)) {
                return condition;
            }
        }
        return null;  // No existing condition for this field
    }

    private void addRangeCondition(JSONObject rangeCondition, String op, Object right) {
        switch (op) {
            case "gt":
                rangeCondition.put("gt", right);
                break;
            case "ge":
                rangeCondition.put("gte", right);
                break;
            case "lt":
                rangeCondition.put("lt", right);
                break;
            case "le":
                rangeCondition.put("lte", right);
                break;
            default:
                throw new IllegalArgumentException("Unsupported comparison operator: " + op);
        }
    }

    private JSONObject applyOptions(JSONObject query, String select, Integer top, Integer offset, String propPrefix) {
        JSONObject options = new JSONObject();
        options.put("query", query);

        if (select.equals("*")) {
            query.put("_source", new JSONObject().put("includes", new JSONArray(select.split(","))));
        } else {
            List<String> selectList = new ArrayList<>();

            for (String field : select.split(",")) {
                String mappedField = getProperty(propPrefix + "." + field);
                if (mappedField == null) {
                    throw new ModuleException("Invalid select field '" + field + "'. Please check if it's correct/present in YAML file",
                            ODataELKErrors.BAD_REQUEST);
                }
                selectList.add(mappedField);
            }
            query.put("_source", new JSONObject().put("includes", new JSONArray(selectList)));
        }

        if (top != null) {
            query.put("size", top);
        }
        if (offset != null) {
            query.put("from", offset);
        }
        logger.debug("applyOptions: {}", options);
        return options;
    }

    private class Tokenizer {
        private final List<String> tokens;
        private int index = 0;

        public Tokenizer(String input) {
            tokens = tokenize(input);
        }

        private List<String> tokenize(String input) {
            List<String> tokens = new ArrayList<>();
            StringBuilder token = new StringBuilder();
            boolean inQuotes = false;

            for (char ch : input.toCharArray()) {
                if (ch == '\'') {
                    inQuotes = !inQuotes;
                }
                if (Character.isWhitespace(ch) && !inQuotes) {
                    if (token.length() > 0) {
                        tokens.add(token.toString());
                        token.setLength(0);
                    }
                } else if (!